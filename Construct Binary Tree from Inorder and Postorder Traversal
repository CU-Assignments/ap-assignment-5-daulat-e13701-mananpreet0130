/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& postorder, int& postIndex, int left, int right) {
        if (left > right) return nullptr;
        int rootVal = postorder[postIndex--];
        TreeNode* root = new TreeNode(rootVal);
        int inorderIndex = 0;
        for (int i = left; i <= right; i++) {
            if (inorder[i] == rootVal) {
                inorderIndex = i;
                break;
            }
        }
        root->right = buildTreeHelper(inorder, postorder, postIndex, inorderIndex + 1, right);
        root->left = buildTreeHelper(inorder, postorder, postIndex, left, inorderIndex - 1);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postIndex = postorder.size() - 1;
        return buildTreeHelper(inorder, postorder, postIndex, 0, inorder.size() - 1);
    }
};
